// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EnclavePoolManagerClient is the client API for EnclavePoolManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnclavePoolManagerClient interface {
	// GetCache represents get the specified cache metadata
	GetCache(ctx context.Context, in *GetCacheRequest, opts ...grpc.CallOption) (*GetCacheResponse, error)
	// SaveCache represents save the data to a cache directory and record the cache metadata
	SaveCache(ctx context.Context, in *SaveCacheRequest, opts ...grpc.CallOption) (*SaveCacheResponse, error)
	// ListCache represents list part of or all of the cache metadata
	ListCache(ctx context.Context, in *ListCacheRequest, opts ...grpc.CallOption) (*ListCacheResponse, error)
	// DeleteCache represents delete the specified cached data and remove the corresponding cache metadata
	DeleteCache(ctx context.Context, in *DeleteCacheRequest, opts ...grpc.CallOption) (*DeleteCacheResponse, error)
	// LoadCache represents load the specified cache data to work directory
	LoadCache(ctx context.Context, in *LoadCacheRequest, opts ...grpc.CallOption) (*LoadCacheResponse, error)
}

type enclavePoolManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewEnclavePoolManagerClient(cc grpc.ClientConnInterface) EnclavePoolManagerClient {
	return &enclavePoolManagerClient{cc}
}

func (c *enclavePoolManagerClient) GetCache(ctx context.Context, in *GetCacheRequest, opts ...grpc.CallOption) (*GetCacheResponse, error) {
	out := new(GetCacheResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.EnclavePoolManager/GetCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enclavePoolManagerClient) SaveCache(ctx context.Context, in *SaveCacheRequest, opts ...grpc.CallOption) (*SaveCacheResponse, error) {
	out := new(SaveCacheResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.EnclavePoolManager/SaveCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enclavePoolManagerClient) ListCache(ctx context.Context, in *ListCacheRequest, opts ...grpc.CallOption) (*ListCacheResponse, error) {
	out := new(ListCacheResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.EnclavePoolManager/ListCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enclavePoolManagerClient) DeleteCache(ctx context.Context, in *DeleteCacheRequest, opts ...grpc.CallOption) (*DeleteCacheResponse, error) {
	out := new(DeleteCacheResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.EnclavePoolManager/DeleteCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enclavePoolManagerClient) LoadCache(ctx context.Context, in *LoadCacheRequest, opts ...grpc.CallOption) (*LoadCacheResponse, error) {
	out := new(LoadCacheResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.EnclavePoolManager/LoadCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnclavePoolManagerServer is the server API for EnclavePoolManager service.
// All implementations must embed UnimplementedEnclavePoolManagerServer
// for forward compatibility
type EnclavePoolManagerServer interface {
	// GetCache represents get the specified cache metadata
	GetCache(context.Context, *GetCacheRequest) (*GetCacheResponse, error)
	// SaveCache represents save the data to a cache directory and record the cache metadata
	SaveCache(context.Context, *SaveCacheRequest) (*SaveCacheResponse, error)
	// ListCache represents list part of or all of the cache metadata
	ListCache(context.Context, *ListCacheRequest) (*ListCacheResponse, error)
	// DeleteCache represents delete the specified cached data and remove the corresponding cache metadata
	DeleteCache(context.Context, *DeleteCacheRequest) (*DeleteCacheResponse, error)
	// LoadCache represents load the specified cache data to work directory
	LoadCache(context.Context, *LoadCacheRequest) (*LoadCacheResponse, error)
	mustEmbedUnimplementedEnclavePoolManagerServer()
}

// UnimplementedEnclavePoolManagerServer must be embedded to have forward compatible implementations.
type UnimplementedEnclavePoolManagerServer struct {
}

func (*UnimplementedEnclavePoolManagerServer) GetCache(context.Context, *GetCacheRequest) (*GetCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCache not implemented")
}
func (*UnimplementedEnclavePoolManagerServer) SaveCache(context.Context, *SaveCacheRequest) (*SaveCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCache not implemented")
}
func (*UnimplementedEnclavePoolManagerServer) ListCache(context.Context, *ListCacheRequest) (*ListCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCache not implemented")
}
func (*UnimplementedEnclavePoolManagerServer) DeleteCache(context.Context, *DeleteCacheRequest) (*DeleteCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCache not implemented")
}
func (*UnimplementedEnclavePoolManagerServer) LoadCache(context.Context, *LoadCacheRequest) (*LoadCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadCache not implemented")
}
func (*UnimplementedEnclavePoolManagerServer) mustEmbedUnimplementedEnclavePoolManagerServer() {}

func RegisterEnclavePoolManagerServer(s *grpc.Server, srv EnclavePoolManagerServer) {
	s.RegisterService(&_EnclavePoolManager_serviceDesc, srv)
}

func _EnclavePoolManager_GetCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnclavePoolManagerServer).GetCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.EnclavePoolManager/GetCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnclavePoolManagerServer).GetCache(ctx, req.(*GetCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnclavePoolManager_SaveCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnclavePoolManagerServer).SaveCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.EnclavePoolManager/SaveCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnclavePoolManagerServer).SaveCache(ctx, req.(*SaveCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnclavePoolManager_ListCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnclavePoolManagerServer).ListCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.EnclavePoolManager/ListCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnclavePoolManagerServer).ListCache(ctx, req.(*ListCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnclavePoolManager_DeleteCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnclavePoolManagerServer).DeleteCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.EnclavePoolManager/DeleteCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnclavePoolManagerServer).DeleteCache(ctx, req.(*DeleteCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnclavePoolManager_LoadCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnclavePoolManagerServer).LoadCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.EnclavePoolManager/LoadCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnclavePoolManagerServer).LoadCache(ctx, req.(*LoadCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EnclavePoolManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1alpha1.EnclavePoolManager",
	HandlerType: (*EnclavePoolManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCache",
			Handler:    _EnclavePoolManager_GetCache_Handler,
		},
		{
			MethodName: "SaveCache",
			Handler:    _EnclavePoolManager_SaveCache_Handler,
		},
		{
			MethodName: "ListCache",
			Handler:    _EnclavePoolManager_ListCache_Handler,
		},
		{
			MethodName: "DeleteCache",
			Handler:    _EnclavePoolManager_DeleteCache_Handler,
		},
		{
			MethodName: "LoadCache",
			Handler:    _EnclavePoolManager_LoadCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
